#!/bin/bash
#SBATCH --job-name=blip3o_clip_clean
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --time=12:00:00
#SBATCH --mem=64G
#SBATCH --output=./slurm_out/blip3o_5shards_%j.out
#SBATCH --error=./slurm_out/blip3o_5shards_%j.err

# =============================================================================
# Clean BLIP3-o CLIP Reproduction Training
# Task: Reproduce CLIP embeddings [B, N, 1024] from EVA embeddings [B, N, 4096]
# Method: Rectified Flow Matching with BLIP3-o DiT
# =============================================================================

echo "üöÄ Clean BLIP3-o CLIP Reproduction Training"
echo "=========================================="
echo "Job ID: ${SLURM_JOB_ID}"
echo "Node: $(hostname)"
echo "Time: $(date)"
echo "GPUs: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | tr '\n' ', ')"
echo "=========================================="

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# ‚úÖ FIXED: Set WandB API key
export WANDB_API_KEY="0d9895af249ee18e4fa141e8a2350e0f4adb920f"
export WANDB_MODE="online"  # Ensure online mode
export WANDB_CACHE_DIR="${TMPDIR}/wandb_cache"  # Use temp dir for cache
mkdir -p "${WANDB_CACHE_DIR}"

# Verify WandB login
echo "üîê Verifying WandB authentication..."
python -c "import wandb; wandb.login(key='$WANDB_API_KEY'); print('‚úÖ WandB login successful')"

# Configuration
EMBEDDINGS_DIR="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/patch_only_256_tokens"
OUTPUT_DIR="./checkpoints/blip3o_clean_$(date +%Y%m%d_%H%M%S)"
TRAINING_MODE="patch_only"
MODEL_SIZE="base"

# Training hyperparameters
NUM_EPOCHS=20
BATCH_SIZE=128
LEARNING_RATE=3e-4
WEIGHT_DECAY=0.01
WARMUP_STEPS=500
MAX_GRAD_NORM=1.0

# Evaluation parameters
EVAL_EVERY_N_STEPS=800
EVAL_NUM_SAMPLES=300
EVAL_INFERENCE_STEPS=50

# Data configuration
MAX_SHARDS=30

# Create output directory
mkdir -p "${OUTPUT_DIR}"
mkdir -p ./slurm_out

echo ""
echo "‚öôÔ∏è Clean BLIP3-o Configuration:"
echo "============================="
echo "Task: Reproduce CLIP embeddings from EVA embeddings"
echo "Method: BLIP3-o DiT with Rectified Flow Matching"
echo "Target: CLIP embeddings [B, N, 1024]"
echo "Conditioning: EVA embeddings [B, N, 4096]"
echo ""
echo "Embeddings: $EMBEDDINGS_DIR"
echo "Output: $OUTPUT_DIR"
echo "Training mode: $TRAINING_MODE"
echo "Model size: $MODEL_SIZE"
echo "Max shards: $MAX_SHARDS"
echo ""
echo "üìä Training Hyperparameters:"
echo "  Epochs: $NUM_EPOCHS"
echo "  Batch size: $BATCH_SIZE"
echo "  Learning rate: $LEARNING_RATE"
echo "  Weight decay: $WEIGHT_DECAY"
echo "  Warmup steps: $WARMUP_STEPS"
echo "  Max grad norm: $MAX_GRAD_NORM"
echo ""
echo "üîç Evaluation Configuration:"
echo "  Eval every: $EVAL_EVERY_N_STEPS steps"
echo "  Eval samples: $EVAL_NUM_SAMPLES"
echo "  Inference steps: $EVAL_INFERENCE_STEPS"
echo ""
echo "üèóÔ∏è Architecture Features:"
echo "  ‚Ä¢ 3D Rotary Position Embedding"
echo "  ‚Ä¢ Sandwich Normalization (RMSNorm)"
echo "  ‚Ä¢ Grouped-Query Attention"
echo "  ‚Ä¢ Rectified Flow Matching"
echo "  ‚Ä¢ Simple Linear Timestep Schedule"
echo "  ‚Ä¢ Clean Euler Integration"
echo ""

# Verify embeddings exist
if [ ! -d "$EMBEDDINGS_DIR" ]; then
    echo "‚ùå Embeddings directory not found: $EMBEDDINGS_DIR"
    echo "Available embeddings:"
    ls -la "/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/" 2>/dev/null || echo "No embeddings found"
    exit 1
fi

echo "‚úÖ Embeddings verified: $EMBEDDINGS_DIR"

# Check available shards
SHARD_COUNT=$(find "$EMBEDDINGS_DIR" -name "*.pkl" | wc -l)
echo "‚úÖ Found $SHARD_COUNT embedding shards"

if [ $SHARD_COUNT -eq 0 ]; then
    echo "‚ùå No embedding shards found!"
    exit 1
fi

if [ $SHARD_COUNT -lt $MAX_SHARDS ]; then
    echo "‚ö†Ô∏è Only $SHARD_COUNT shards available (requested $MAX_SHARDS)"
    MAX_SHARDS=$SHARD_COUNT
    echo "   Adjusted to use $MAX_SHARDS shards"
fi

echo "‚úÖ Training script ready"

echo ""
echo "üöÄ Starting Clean BLIP3-o Training..."
echo "===================================="
echo "üéØ Expected Behavior:"
echo "  ‚úÖ Non-zero gradients from first step"
echo "  ‚úÖ Decreasing loss within first few epochs"
echo "  ‚úÖ Velocity similarity increasing from ~0.01 to >0.1"
echo "  ‚úÖ CLIP similarity during evaluation >0.1 (good), >0.4 (excellent)"
echo "  ‚úÖ No NaN/Inf issues or tensor shape mismatches"
echo ""
echo "üèóÔ∏è Architecture:"
echo "  ‚Ä¢ BLIP3-o DiT with 3D RoPE and Sandwich Normalization"
echo "  ‚Ä¢ Rectified Flow Matching"
echo "  ‚Ä¢ Simple Linear Timestep Schedule"
echo "  ‚Ä¢ Clean Euler Integration"
echo "  ‚Ä¢ EVA [4096] ‚Üí CLIP [1024] mapping"
echo ""

# Launch clean BLIP3-o training
python train_dit.py \
    --chunked_embeddings_dir "$EMBEDDINGS_DIR" \
    --output_dir "$OUTPUT_DIR" \
    --model_size "$MODEL_SIZE" \
    --training_mode "$TRAINING_MODE" \
    --learning_rate $LEARNING_RATE \
    --batch_size $BATCH_SIZE \
    --num_epochs $NUM_EPOCHS \
    --warmup_steps $WARMUP_STEPS \
    --weight_decay $WEIGHT_DECAY \
    --max_grad_norm $MAX_GRAD_NORM \
    --eval_every_n_steps $EVAL_EVERY_N_STEPS \
    --eval_num_samples $EVAL_NUM_SAMPLES \
    --eval_inference_steps $EVAL_INFERENCE_STEPS \
    --max_shards $MAX_SHARDS \
    --fp16

TRAINING_EXIT_CODE=$?

echo ""
echo "======================================"
echo "üìä Clean BLIP3-o Training Results"
echo "======================================"

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Clean BLIP3-o training completed successfully!"
    
    echo ""
    echo "üìã Training Summary:"
    echo "=================="
    
    # Check for training results
    SUMMARY_FILE="$OUTPUT_DIR/training_summary.json"
    CONFIG_FILE="$OUTPUT_DIR/experiment_config.json"
    
    if [ -f "$SUMMARY_FILE" ]; then
        echo ""
        echo "üìä Training Results:"
        echo "=================="
        
        # Extract key metrics using Python
        python -c "
import json
import sys
try:
    with open('$SUMMARY_FILE', 'r') as f:
        data = json.load(f)
    
    print(f'üéØ Best Loss: {data.get(\"best_loss\", float(\"inf\")):.6f}')
    print(f'üéØ Best CLIP Similarity: {data.get(\"best_eval_similarity\", 0):.4f}')
    print(f'üìä Total Steps: {data.get(\"total_steps\", 0):,}')
    print(f'‚è±Ô∏è Training Time: {data.get(\"total_time_seconds\", 0):.1f} seconds')
    
    # Final evaluation
    final_eval = data.get('final_eval', {})
    if final_eval:
        print(f'')
        print(f'üîç Final Evaluation:')
        clip_sim = final_eval.get('eval_clip_similarity', 0)
        high_qual = final_eval.get('eval_high_quality', 0) * 100
        very_high_qual = final_eval.get('eval_very_high_quality', 0) * 100
        
        print(f'   Overall CLIP Similarity: {clip_sim:.4f}')
        print(f'   High Quality (>0.7): {high_qual:.1f}%')
        print(f'   Very High Quality (>0.8): {very_high_qual:.1f}%')
        print(f'   Samples Evaluated: {final_eval.get(\"eval_samples\", 0):,}')
        
        # Assessment
        if clip_sim > 0.8:
            print(f'   üéâ EXCELLENT: Outstanding CLIP reproduction!')
        elif clip_sim > 0.6:
            print(f'   ‚úÖ VERY GOOD: Strong CLIP reproduction!')
        elif clip_sim > 0.4:
            print(f'   ‚úÖ GOOD: Solid CLIP reproduction!')
        elif clip_sim > 0.2:
            print(f'   üìà FAIR: Decent reproduction, shows learning!')
        else:
            print(f'   ‚ö†Ô∏è NEEDS WORK: Low similarity, check hyperparameters')
    
except Exception as e:
    print(f'Could not parse training summary: {e}')
    # Try to show any available checkpoints
    import os
    checkpoints = [f for f in os.listdir('$OUTPUT_DIR') if f.endswith('.pt')]
    if checkpoints:
        print(f'Found {len(checkpoints)} checkpoint files')
        print(f'Latest: {max(checkpoints)}')
    sys.exit(1)
"
        
        echo ""
        echo "üìÅ Training artifacts saved to: $OUTPUT_DIR"
    else
        echo "‚ö†Ô∏è No training summary found, checking for any outputs..."
        echo "Directory contents:"
        ls -la "$OUTPUT_DIR" 2>/dev/null || echo "Output directory not found"
    fi
    
    echo ""
    echo "üéØ Next Steps:"
    echo "============"
    echo "1. Review training logs above for success indicators"
    echo "2. If results are good, run with more data:"
    echo "   ‚Ä¢ Increase MAX_SHARDS to use more training data" 
    echo "   ‚Ä¢ Increase NUM_EPOCHS for longer training"
    echo "   ‚Ä¢ Adjust BATCH_SIZE based on memory usage"
    echo "3. Run comprehensive evaluation on test set"
    echo ""
    echo "üîç SUCCESS INDICATORS:"
    echo "  ‚úÖ Non-zero gradients throughout training"
    echo "  ‚úÖ Decreasing loss trend"
    echo "  ‚úÖ Increasing similarity metrics"
    echo "  ‚úÖ Final CLIP similarity >0.2 (fair), >0.4 (good), >0.6 (excellent)"
    
    echo ""
    echo "‚úÖ SUCCESS: Clean BLIP3-o training completed!"
    
else
    echo "‚ùå FAILED: Training exit code $TRAINING_EXIT_CODE"
    echo ""
    echo "üí° Troubleshooting:"
    echo "  ‚Ä¢ Check log files in ./slurm_out/ for detailed error messages"
    echo "  ‚Ä¢ Verify all required Python files are present"
    echo "  ‚Ä¢ Check embeddings directory structure and file formats"
    echo "  ‚Ä¢ Monitor GPU memory usage with nvidia-smi"
    echo "  ‚Ä¢ Try reducing batch_size if out-of-memory errors"
    echo ""
    echo "üîß Quick Recovery Options:"
    echo "  ‚Ä¢ Use smaller model: --model_size small or tiny"
    echo "  ‚Ä¢ Reduce batch size: --batch_size 4"
    echo "  ‚Ä¢ Use fewer shards: MAX_SHARDS=2"
fi

echo ""
echo "üìä GPU Resource Usage Summary:"
nvidia-smi --query-gpu=name,memory.total,memory.used,utilization.gpu --format=csv,noheader,nounits | \
    awk 'BEGIN{print "GPU | Total Memory | Used Memory | Utilization"} {printf "%s | %s MB | %s MB | %s%%\n", $1, $2, $3, $4}'

echo ""
echo "üèÅ Job completed at $(date)"
echo "Total job time: $(echo "scale=2; ($(date +%s) - $SECONDS) / 3600" | bc -l) hours"
echo ""
echo "üìö CLEAN BLIP3-o SUMMARY:"
echo "This job trains a clean BLIP3-o DiT to reproduce CLIP embeddings from EVA embeddings."
echo "Success indicates the architecture can perform cross-modal embedding translation effectively."
echo "The implementation follows the BLIP3-o paper with simple linear timestep scheduling."
echo "=========================================="

exit $TRAINING_EXIT_CODE